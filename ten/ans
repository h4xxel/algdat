/*uppg1*/
/*Anropskedjan ser ut som följande:
sum(5) -> 5+sum(4)+sum(3)+sum(2)+sum(1)+sum(0)
där sum(0) returnerar 0. Varje nytt funktionsanrop lägger
ett record på systemstacken som innehåller returadressen
till funktionen den kommer ifrån samt de argument som skickas.*/
unsigned int sum(unsigned int n) {
	if(!n)
		return n;
	return n+sum(n-1);
}

/*Problemet kan också lösas iterativt med O(1) minneskomplexitet*/
unsigned int sum(unsigned int n) {
	unsigned int sum;
	for(sum=0; n; sum+=n, n--);
	return sum;
}

/*Problemet kan också lösas med O(1) tidskomplexitet genom att
se det som en aritmetisk summa, vilket är den mest effektiva lösningen*/
unsigned int sum(unsigned int n) {
	return n*(n+1)/2
}


/*uppg2*/
/*Den rekursiva funktionen pushar ett record på
systemkursen vid varje anrop till sig själv, och gör
ett anrop för varje tal den ska räkna ut, vilket gör den
ineffektiv för stora n.*/
unsigned int fib_recursive(unsigned int n, unsigned int val1, unsigned int val2) {
	if(!n)
		return val1;
	return fib_recursive(n-1, val2, val1+val2);
}
unsigned int fib(unsigned int n) {
	fib_recursive(n, 0, 1);
}

/*Den iterativa funktionen har statisk [O(1)] minnesanvändning
och passar därför bättre för stora n*/
unsigned int fib(unsigned int n) {
	unsigned int a, b, tmp;
	for(a=0, b=1; n; n--) {
		tmp=b;
		b+=a;
		a=tmp;
	}
	return a;
}

/*uppg3*/
/*Vi har två basfall, ett om vi inte ska flytta något torn (n=0)
och ett om vi ska flytta ett torn som består av bara en bricka.
Resten av funktionen går ut på att flytta ett torn med n-1 brickor
till hjälppinnen, flytta den understa brickan till den slutliga pinnen och
sist flytta tornet på hjälppinnen till den slutgiltiga pinnen.
Genom induktion kan algoritmen alltså bevisas korrekt.*/
void hanoi(STACK *from, STACK *aux, STACK *to, unsigned int n) {
	if(!n)
		return;
	if(n==1) {
		push(to, pop(from));
		return;
	}
	hanoi(from, to, aux, n-1);
	hanoi(from, aux, to, 1);
	hanoi(aux, from, to, n-1);
}


/*uppg8*/
void sort(int *array, unsigned int n) {
	unsigned int i, j, min;
	int tmp;
	for(i=0; i<n-1; i++) {
		min=i;
		for(j=i+1; j<n; j++)
			if(array[j]<array[min])
				min=j;
		if(min==i)
			continue;
		tmp=array[i];
		array[i]=array[min];
		array[min]=tmp;
	}
}

/*uppg9*/
void sort(int *array, unsigned int n) {
	unsigned int i, j, min;
	int tmp;
	for(i=1; i<n; i++) {
		tmp=array[i];
		for(j=i; j>0&&tmp<array[j-1]; array[j]=array[j-1], j--);
		array[j]=tmp;
	}
}

/*uppg10*/
int *merge(int *left, int *right, unsigned int nl, unsigned int nr) {
	int *res=malloc(sizeof(int)*(nl+nr)), *insert=res;
	while(nl||nr) {
		if(nl&&nr) {
			if(*left<=*right)
				goto insertl;
			goto insertr;
		} else if(nl) {
			insertl:
			*insert=*left;
			left++;
			insert++;
			nl--;
		} else if(nr) {
			insertr:
			*insert=*right;
			right++;
			insert++;
			nr--;
		}
	}
	return res;
}
int *sort(int *array, unsigned int n) {
	int *left, *right, *tmp, middle, i, j;
	if(n<1)
		return array;
	if(n==1) {
		tmp=malloc(sizeof(int));
		*tmp=*array;
		return tmp;
	}
	middle=n/2;
	left=malloc(sizeof(int)*middle);
	right=malloc(sizeof(int)*(middle+1));
	for(i=0; i<middle; i++)
		left[i]=array[i];
	for(j=0; j<n-middle; j++)
		right[j]=array[middle+j];
	tmp=sort(left, i);
	free(left);
	left=tmp;
	tmp=sort(right, j);
	free(right);
	right=tmp;
	tmp=merge(left, right, i, j);
	free(left);
	free(right);
	return tmp;
}

/*uppg12*/
int search(int *array, unsigned int min, unsigned int max, int value) {
	unsigned int middle;
	if(max<min)
		return -1;
	middle=min+(max-min)/2;
	if(array[middle]>value)
		return search(array, min, middle-1, value);
	if(array[middle]<value)
		return search(array, middle+1, max, value);
	return middle;
}

/*uppg13*/
typedef int *STACK;
void push(STACK *stack, int val) {
	**stack=val;
	(*stack)++;
}
int pop(STACK *stack) {
	(*stack)--;
	return **stack;
}

/*uppg14*/
typedef struct STACK {
	int value;
	struct STACK *next;
} STACK;
void push(STACK **stack, int value) {
	STACK *record=malloc(sizeof(STACK));
	record->value=value;
	record->next=*stack;
	*stack=record;
}
int pop(STACK **stack) {
	STACK *tmp=*stack;
	int value=tmp->value;
	*stack=tmp->next;
	free(tmp);
	return value;
}

/*uppg16*/
#define POSTFIX_POPARG(operator) \
	stack--; \
	a=*stack; \
	stack--; \
	b=*stack; \
	*stack=b operator a; \
	stack++;

int parse_postfix(char *string) {
	char *s;
	int *stack, *save;
	int a, b;
	if(!string)
		return 0;
	save=stack=malloc(512);
	while((s=strchr(string, ' '))||(s=strchr(string, '\0'))) {
		switch(*string) {
			case '+':
				if(!*(string+1)||*(string+1)!=' ')
					goto number;
				POSTFIX_POPARG(+);
				break;
			case '-':
				if(!*(string+1)||*(string+1)!=' ')
					goto number;
				POSTFIX_POPARG(-);
				break;
			case '*':
				POSTFIX_POPARG(*);
				break;
			case '/':
					stack--;
					a=*stack;
					if(!a) {
						fprintf(stderr, "Division by zero\n");
						free(save);
						return 0;
					}
					stack--;
					b=*stack;
					*stack=b / a;
					stack++;
				break;
			default:
			number:
				*s=0;
				*stack=atoi(string);
				stack++;
			case ' ':
				break;
		}
		if(!*(string=s+1))
			break;
	}
	stack--;
	a=*stack;
	free(save);
	return a;
}

/*uppg17*/
struct QUEUE_NODE {
	void *object;
	struct QUEUE_NODE *prev;
	struct QUEUE_NODE *next;
};
typedef struct QUEUE {
	struct QUEUE_NODE *first;
	struct QUEUE_NODE *last;
} QUEUE;
void enqueue(QUEUE *queue, void *object) {
	struct QUEUE_NODE *node;
	node=malloc(sizeof(struct QUEUE_NODE));
	node->object=object;
	node->prev=queue->last;
	node->next=NULL;
	if(queue->last)
		queue->last->next=node;
	else
		queue->first=node;
	queue->last=node;
}
void *pop(QUEUE *queue) {
	struct QUEUE_NODE *node;
	void *object;
	if(queue->first) {
		node=queue->first;
		object=node->object;
		if(queue->first->next)
			queue->first=queue->first->next;
		else
			queue->last=queue->first=NULL;
		free(node);
		return object;
	}
	return NULL;
}

/*uppg23*/
/*Array-baserad*/
int exists(int *array, unsigned int n, int value) {
	for(; n; n--)
		if(array[n-1]==value)
			return 1;
	return 0;
}

/*List-baserad*/
int exists(LIST *list, int value) {
	for(; list; list=list->next)
		if(list->value==value)
			return 1;
	return 0;
}

/*uppg24*/
/*Array-baserad*/
int remove(int *array, unsigned int n, int value) {
	unsigned int i;
	for(i=0; i<n; i++)
		if(array[i]==value) {
			for(; i<n-1; i++)
				array[i]=array[i+1];
			return n-1;
		}
	return n;
}

/*List-baserad*/
void remove(LIST **list, int value) {
	LIST *tmp;
	for(; *list; list=&(*list)->next)
		if((*list)->value==value) {
			tmp=*list;
			*list=tmp->next;
			free(tmp);
			return;
		}
}

/*uppg30*/
void inorder(BST *bst) {
	inorder(bst->left);
	printf("%i\n", bst->value);
	inorder(bst->right);
}
